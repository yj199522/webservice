# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Code Deploy

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Code Deploy Build
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: csye6225-webapp-${{ github.sha }}.zip
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Running Unit Test
        run: |
          npm i && npm test

      - name: Building Zip File
        run: |
          mkdir codedeploy_artifact
          zip -r ${{env.ARTIFACT_NAME}} . -x ".git/*" ".github/*" "node_modules/*" "package-lock.json" "packer/*"
          mv ${{env.ARTIFACT_NAME}} codedeploy_artifact

      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - name: Push artifact to s3
        run: |
          echo ${{secrets.S3_CODEDEPLOY_BUCKET}}
          aws s3 sync ./codedeploy_artifact s3://${{secrets.S3_CODEDEPLOY_BUCKET}}

      - name: CodeDeploy API call
        run: |
          output=$(aws deploy create-deployment \
          --application-name csye6225-webapp \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name csye6225-webapp-deployment \
          --description "CSYE6255 - CodeDeploy" \
          --s3-location bucket=${{secrets.S3_CODEDEPLOY_BUCKET}},key=${{env.ARTIFACT_NAME}},bundleType=zip \
          --region ${{secrets.AWS_REGION}} \
          --output json)
          depId=$(echo $output | jq -r '.deploymentId')
          aws deploy wait deployment-successful --deployment-id $depId
